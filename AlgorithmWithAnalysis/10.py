# 11.07 (T)
# 수치적분

import numpy as np

# 사다리꼴 적분공식
# Simpson 적분공식
# ⭐️Gauss 구적법⭐️

## 적분대상이 데이터로 주어진 경우에 어떻게 다룰 것인가?

# 사다리꼴 적분공식이 정확도가 낮은 이유
# 선형보간법을 이용한 한계로 실 곡선을 따라가지 못함! 그래서 정확도가 낮음
# 이 한계를 극복? -> 보간법의 차수를 높인다
def f(x):
    return x**2*np.exp(-x)

n = 3
a = 2.0
b = 4.0
h = (b-a)/n
x = np.linspace(a,b, n+1)

sums = 0.0
for i in range(n):
    sums += f(x[i]) + f(x[i+1])
result = h*sums/2
print(f'I = {result:0.4f}')



# Simpson 적분공식 -> 사다리꼴 적분공식의 단점을 보완하기 위해 선형 보간법의 차수를 높인 것!
# 심슨의 1/3 공식
# 처음과 끝을 제외한 중간들의 x_i값들이 홀수일땐 앞에 4를, 짝수일땐 앞에 2를 곱한다

# 평균? -> 똑같은 가중치를 주고 계산하는 것

# 11.08 (W)
# 데이터를 사용한 적분
# 실험 데이터등을 사용하여 적분을 구해야하는 경우
# 예를 들어 자동차의 속도에 대해 적분을 하면 주행거리를 알 수 있다.
# 또, 미사일의 가속도를 통해 미사일의 속도를 알 수 있다.

# Gauss 구적법 ( Gaussian Quadrature )
## 특정 위치에서의 함수 값과 그에 해당하는 가중 값의 곱을 합산하여 근사적으로 적분을 계산하는 방법
## node : 절점, weight : 가중값
## 절점과 가중값을 알아야 사용가능
## 적분구간은 항상 -1부터 +1 까지

