알고리즘으로 배우는 공학수치해석 중간고사 

1. 수치해석이란?
최근 자율주행이나 로봇 분야에서 인공지능이 관심을 끌고있다.
이 인공지능의 새로운 분야들은 모두 "수치해석"에 기반을 두고 있음을 알아두자.

전통적 수치해석은 고전적 수학이론에 기반을 둔다.
고전적 수학이론에서는 문제 해결을 위해 여러 "근사적 방법"을 동원했다.
이 배경이 정제된 수학이론에서 시작되었다.
따라서 선형대수, 급수, 미적분, 벡터, 함수론등 고등 수학지식을 요구했다.

근사해법(Approximation)은 정답과 가까우리라 생각되는 해답을 찾는 것.
근사해법이 정답인가? **No.** 정답을 아는 해는 수치해석으로 풀지 않음

수치해석에서 제시하는 문제를 푸는 방법은 알고리즘으로 제시된다.
알고리즘은 효율성 극대화를 위해 축약된 형태로 제공되며, 입문자들이 그 내용을 알기란 곤란.
알고리즘 내용을 이해했더라도, 현실화를 위해 컴퓨터 언어를 통해 프로그래밍을 하고, 효율성과 정확성을 확인해야함.
수치해석 입문자가 모든 수준을 갖추기엔 쉽지 않기에 수치해석 분야에 대한 장벽이 높아 보임.

수치해석적 방법론?
수학적 이론이 필수이기에 기본적 내용은 학습해야함.
알고리즘 == 암호문. 풀면 쉽게 이해할 수 있지만 해독이 안되면 어려움.
프로그래밍으로 검증하기 위해 프로그램 언어에 익숙해질 필요가 있음.

수치해석이라 함은 컴퓨터에서 문제를 해결하는 방법에 관한 것이라고 생각함
그러나 실제는 문제를 근사적 방법으로 해결하고자 하는 하나의 방법론이다.

1.1 고전적 수치해석 방법론(classical numerical analysis)
- 시대에 뒤떨어지거나 잘못된 것이 아님.
- 마찬가지로 하나의 방법론일 뿐.
- 강력한 수학적 배경 필요.
- 근사해법의 정확성 검증을 위해 오차에 대한 추정문제(error estimation)를 다룸.
- 이를 위해 최소한의 미적분(calculus), 벡터이론(vector theory)및 고급 함수론에 대한 지식 필요.
- 수학이론 -> 알고리즘 -> 의사코드(pseudo code)
- 수학이론을 가장 중요시 여김. 문제에 대한 근사해법이 결정되면 알고리즘 제작.
- 의사코드는 실제 작동하는 프로그램이 아닌 알고리즘을 프로그램 형태로 설명해 놓은 것
ex) 판매세가 포함된 물건 값 계산하기
1. get price of item \\ 물건 값 투입하기
2. get sales tax rate \\ 세금 할인율 투입하기
3. sales tax = price of item times sales tax rate \\ 판매세 = 물건 값 * 세금율
4. final price = price of item plus sales tax \\ 총합 = 총합 + 판매세
5. display final price \\ 총합 표시하기
6. halt \\\\ 종료

def compute_salestax():
    # get price of item
    price = float(raw_input("What is the item's price?")
    # get sales tax rate
    tax_rate = float(raw_input(\"Enter the sales tax rate, in decimal: ")
    # sales tax = price of item times sales tax rate 
    tax = price * tax_rate
    # final price = price of item plus sales tax
    final_price = price + tax
    # display final price
    print("The final price is:", final_price)
    # halt return


1.2 시류를 반영한 수치해석 방법론(contemporary numerical analysis)
- 수학이론 -> 알고리즘 -> 프로그램이
- 보다 현실적 고민을 해결하고자 하는 노력
- ex)인공지능, 머신러닝,,, 수치해석분야에서도 이에 부응하기 위한 변화의 바람이 분다.
- ⭐️⭐️방대한 양의 데이터를 어떻게 다룰 것인가?⭐️⭐️
- ⭐️⭐️인공지능 및 머신러닝 관련 프로그램이나 라이브러리를 어떻게 적용할 것인가?⭐️⭐️
- 각종 센서와 측정 기기의 데이터가 실시간으로 생성중
- 인터넷 사용증가에 따라 여러 분야에서의 데이터 폭증(과거엔 고려되지 않았던 양적 데이터 폭증)
- 많은 데이터들 속 필요한 데이터를 찾아 분석, 결론도출을 위한 체계적 방법 필요
- 데이터 과학의 영역에 속함. 통계적 수치 값과 보간법(interpolation), 회귀법(regression)등 필요
- 다양한 분야에서 제공하는 라이브러리 접목

1.3 두 방법의 차이?
- 누가 더 좋다 나쁘다의 개념이 아닌, 각 장점을 살리는 것을 목표
- 과학기술, 통계, 인공지능 라이브러리, 수학이론 -> 알고리즘

2. 파이썬 언어
2.1 라이브러리?
- 별명 붙여서 쓰기 (import numpy as np)
- 전체 내용을 불러오기 (from numpy import*) 별로 추천하지 않음
- 필요한 내용만 불러오기 (from numpy import cos)
- 다양한 알고리즘에서 행렬의 연산 및 변환이 사용됨.
- 그렇기에 수치해석에서 행렬을 다루는 문제는 매우 중요.
- 배열(array)로 만들어 다루는 것은 필수적.


공학수치해석을 배우면서 개인적으로 느낀점

 시류를 따져보았을 때, 보다 현실적 고민을 해결하고자 하는 노력이 필요함을 깨닫고있다. 데이터의 폭증으로 우리는 그 데이터를 분석하여 그 속에서 필요한 데이터들만을 사용하여 결론도출을 해내야만 한다.
 이를 위해 반드시 선행되어야 하는 개념이 바로 공학수치해석이었다. 기존엔 아무렇지 않게 사용하던 공학용 계산기의 cos함수 내부에도 공학적 수치해석이 반영되어있으리라고는 생각도 못했다. 공학적 수치해석이 가장 필요하다고 생각했던 이유 중 하나는 바로 오차에 대한 개념을 접하면서부터였다. 모든 기계공학 실험 레포트를 작성하면서 매번 오차에 대한 값을 작성하면서도 컴퓨터 내부적으로 오차를 포함하고 있을 것이라고는 생각하지 않았다. 하지만 컴퓨터로 수치해석을 하는 이유는 현실적 해답을 해석적 방법으로 찾을 수 없기 때문인데, 수치해석은 '근사적'으로 해답을 찾는 것이므로 오차가 존재할 수밖에 없다. 다양한 오차들 중 절단오차와 반올림오차는 이런 오차에 대한 개념을 잡는데 확실히 도움이 되었다. 내가 사용하는 계산기의 pi가 정말로 3.141592...의 모든 값을 담고 있지 않는 것 처럼 이런 사소한 부분 하나하나가 모두 오차에 포함되는 것이다.  
 이러한 오차에 대한 이해를 기반으로 센서가 측정한 값들을 해석한다면 더욱 참값에 근사하는 값을 얻어낼 수 있을 것이다. 
 나에게 공학수치해석은 그저 기계공학도이기에  프로그래밍 언어로 코딩을 하지 않아도 된다는 안일한 생각을 하지 않고 더 폭넓은 지식을 쌓을 수 있는 계기를 제공했다.



 