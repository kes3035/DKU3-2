#   9월 6일 1주차 알고리즘으로 배우는 수치해석

#   수치해석과 시류
##   최근 인공지능이 큰 관심을 끌고 있음. 왜냐면 자율주행 or 로봇과 같은 새로운 분야에서 발전이 있었기 때문.
##   인공지능의 새로운 분야가 궁극적으로 "수치해석" 에 기반을 둠을 알아두자.

##   전통적 수치해석 -> 고전적 수학이론에 기반.
##   문제 해결을 위해 수치해석에서는 여러 "근사적 방법"을 동원했고 이 배경이 정제된 수학이론에서 시작.
##   선형대수, 급수, 미적분, 벡터, 함수론,,,등 고등 수학지식 요구.

###  근사해법? (Approximation) 정답과 가까우리라 생각되는 해답 ( = 근사해)
###  근사해법은 정답이 아님! 그럼 왜? 정답을 모르니까! 정답을 아는 해는 수치해석으로 풀지 않음.

##   수치해석에서 제시하는 문제를 풀기위한 방법은 알고리즘으로 제시.
##   알고리즘은 효율성 극대화를 위해 축약된 상태로 제공, 입문자들이 그 내용을 파악하기 곤란.

##   알고리즘 원리를 이해했더라도, 현실화를 위해 컴퓨터 언어를 사용해서 프로그래밍을 통해 효율성과 정확성 확인.
##   수치해석 입문자가 모든 수준을 갖추기엔 쉽지 않기에 수치해석 분야에 대한 장벽이 높아보이기도 함.

#   수치해석적 방법론
##   수학적 이론이 필수이기에 기본적 내용은 학습 -> 어려운 개념을 효과적으로 제시하기 위함.
##   알고리즘 == 암호문. 풀면 쉽게 이해할 수 있지만, 해독이 되지 않으면 어렵다.
##   프로그래밍으로 검증하기 위해 프로그램 언어에 익숙해질 필요 있음.

### google Colab => Jupyter notebook 무료 제공
### Anaconda

